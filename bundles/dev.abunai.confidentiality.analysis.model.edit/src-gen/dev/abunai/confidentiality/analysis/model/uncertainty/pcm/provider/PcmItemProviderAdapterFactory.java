/**
 */
package dev.abunai.confidentiality.analysis.model.uncertainty.pcm.provider;

import dev.abunai.confidentiality.analysis.model.uncertainty.pcm.util.PcmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PcmItemProviderAdapterFactory extends PcmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PcmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintySourceInResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMExternalUncertaintySourceInResourceItemProvider pcmExternalUncertaintySourceInResourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintySourceInResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMExternalUncertaintySourceInResourceAdapter() {
		if (pcmExternalUncertaintySourceInResourceItemProvider == null) {
			pcmExternalUncertaintySourceInResourceItemProvider = new PCMExternalUncertaintySourceInResourceItemProvider(this);
		}

		return pcmExternalUncertaintySourceInResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintySourceInUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMExternalUncertaintySourceInUsageItemProvider pcmExternalUncertaintySourceInUsageItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintySourceInUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMExternalUncertaintySourceInUsageAdapter() {
		if (pcmExternalUncertaintySourceInUsageItemProvider == null) {
			pcmExternalUncertaintySourceInUsageItemProvider = new PCMExternalUncertaintySourceInUsageItemProvider(this);
		}

		return pcmExternalUncertaintySourceInUsageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintyScenarioInResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMExternalUncertaintyScenarioInResourceItemProvider pcmExternalUncertaintyScenarioInResourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintyScenarioInResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMExternalUncertaintyScenarioInResourceAdapter() {
		if (pcmExternalUncertaintyScenarioInResourceItemProvider == null) {
			pcmExternalUncertaintyScenarioInResourceItemProvider = new PCMExternalUncertaintyScenarioInResourceItemProvider(this);
		}

		return pcmExternalUncertaintyScenarioInResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintyScenarioInUsage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMExternalUncertaintyScenarioInUsageItemProvider pcmExternalUncertaintyScenarioInUsageItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMExternalUncertaintyScenarioInUsage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMExternalUncertaintyScenarioInUsageAdapter() {
		if (pcmExternalUncertaintyScenarioInUsageItemProvider == null) {
			pcmExternalUncertaintyScenarioInUsageItemProvider = new PCMExternalUncertaintyScenarioInUsageItemProvider(this);
		}

		return pcmExternalUncertaintyScenarioInUsageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMBehaviorUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMBehaviorUncertaintySourceItemProvider pcmBehaviorUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMBehaviorUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMBehaviorUncertaintySourceAdapter() {
		if (pcmBehaviorUncertaintySourceItemProvider == null) {
			pcmBehaviorUncertaintySourceItemProvider = new PCMBehaviorUncertaintySourceItemProvider(this);
		}

		return pcmBehaviorUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMBehaviorUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMBehaviorUncertaintyScenarioItemProvider pcmBehaviorUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMBehaviorUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMBehaviorUncertaintyScenarioAdapter() {
		if (pcmBehaviorUncertaintyScenarioItemProvider == null) {
			pcmBehaviorUncertaintyScenarioItemProvider = new PCMBehaviorUncertaintyScenarioItemProvider(this);
		}

		return pcmBehaviorUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMInterfaceUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMInterfaceUncertaintySourceItemProvider pcmInterfaceUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMInterfaceUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMInterfaceUncertaintySourceAdapter() {
		if (pcmInterfaceUncertaintySourceItemProvider == null) {
			pcmInterfaceUncertaintySourceItemProvider = new PCMInterfaceUncertaintySourceItemProvider(this);
		}

		return pcmInterfaceUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMInterfaceUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMInterfaceUncertaintyScenarioItemProvider pcmInterfaceUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMInterfaceUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMInterfaceUncertaintyScenarioAdapter() {
		if (pcmInterfaceUncertaintyScenarioItemProvider == null) {
			pcmInterfaceUncertaintyScenarioItemProvider = new PCMInterfaceUncertaintyScenarioItemProvider(this);
		}

		return pcmInterfaceUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintySourceInExternalCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMConnectorUncertaintySourceInExternalCallItemProvider pcmConnectorUncertaintySourceInExternalCallItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintySourceInExternalCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMConnectorUncertaintySourceInExternalCallAdapter() {
		if (pcmConnectorUncertaintySourceInExternalCallItemProvider == null) {
			pcmConnectorUncertaintySourceInExternalCallItemProvider = new PCMConnectorUncertaintySourceInExternalCallItemProvider(this);
		}

		return pcmConnectorUncertaintySourceInExternalCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintySourceInEntryLevelSystemCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMConnectorUncertaintySourceInEntryLevelSystemCallItemProvider pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintySourceInEntryLevelSystemCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMConnectorUncertaintySourceInEntryLevelSystemCallAdapter() {
		if (pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider == null) {
			pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider = new PCMConnectorUncertaintySourceInEntryLevelSystemCallItemProvider(this);
		}

		return pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintyScenarioInExternalCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMConnectorUncertaintyScenarioInExternalCallItemProvider pcmConnectorUncertaintyScenarioInExternalCallItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintyScenarioInExternalCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMConnectorUncertaintyScenarioInExternalCallAdapter() {
		if (pcmConnectorUncertaintyScenarioInExternalCallItemProvider == null) {
			pcmConnectorUncertaintyScenarioInExternalCallItemProvider = new PCMConnectorUncertaintyScenarioInExternalCallItemProvider(this);
		}

		return pcmConnectorUncertaintyScenarioInExternalCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintyScenarioInEntryLevelSystemCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMConnectorUncertaintyScenarioInEntryLevelSystemCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMConnectorUncertaintyScenarioInEntryLevelSystemCallAdapter() {
		if (pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider == null) {
			pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider = new PCMConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider(this);
		}

		return pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMComponentUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMComponentUncertaintySourceItemProvider pcmComponentUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMComponentUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMComponentUncertaintySourceAdapter() {
		if (pcmComponentUncertaintySourceItemProvider == null) {
			pcmComponentUncertaintySourceItemProvider = new PCMComponentUncertaintySourceItemProvider(this);
		}

		return pcmComponentUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMComponentUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PCMComponentUncertaintyScenarioItemProvider pcmComponentUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.pcm.PCMComponentUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPCMComponentUncertaintyScenarioAdapter() {
		if (pcmComponentUncertaintyScenarioItemProvider == null) {
			pcmComponentUncertaintyScenarioItemProvider = new PCMComponentUncertaintyScenarioItemProvider(this);
		}

		return pcmComponentUncertaintyScenarioItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pcmExternalUncertaintySourceInResourceItemProvider != null) pcmExternalUncertaintySourceInResourceItemProvider.dispose();
		if (pcmExternalUncertaintySourceInUsageItemProvider != null) pcmExternalUncertaintySourceInUsageItemProvider.dispose();
		if (pcmExternalUncertaintyScenarioInResourceItemProvider != null) pcmExternalUncertaintyScenarioInResourceItemProvider.dispose();
		if (pcmExternalUncertaintyScenarioInUsageItemProvider != null) pcmExternalUncertaintyScenarioInUsageItemProvider.dispose();
		if (pcmBehaviorUncertaintySourceItemProvider != null) pcmBehaviorUncertaintySourceItemProvider.dispose();
		if (pcmBehaviorUncertaintyScenarioItemProvider != null) pcmBehaviorUncertaintyScenarioItemProvider.dispose();
		if (pcmInterfaceUncertaintySourceItemProvider != null) pcmInterfaceUncertaintySourceItemProvider.dispose();
		if (pcmInterfaceUncertaintyScenarioItemProvider != null) pcmInterfaceUncertaintyScenarioItemProvider.dispose();
		if (pcmConnectorUncertaintySourceInExternalCallItemProvider != null) pcmConnectorUncertaintySourceInExternalCallItemProvider.dispose();
		if (pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider != null) pcmConnectorUncertaintySourceInEntryLevelSystemCallItemProvider.dispose();
		if (pcmConnectorUncertaintyScenarioInExternalCallItemProvider != null) pcmConnectorUncertaintyScenarioInExternalCallItemProvider.dispose();
		if (pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider != null) pcmConnectorUncertaintyScenarioInEntryLevelSystemCallItemProvider.dispose();
		if (pcmComponentUncertaintySourceItemProvider != null) pcmComponentUncertaintySourceItemProvider.dispose();
		if (pcmComponentUncertaintyScenarioItemProvider != null) pcmComponentUncertaintyScenarioItemProvider.dispose();
	}

}
