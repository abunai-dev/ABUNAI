/**
 */
package dev.abunai.confidentiality.analysis.model.uncertainty.dfd.provider;

import dev.abunai.confidentiality.analysis.model.uncertainty.dfd.util.DfdAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DfdItemProviderAdapterFactory extends DfdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DfdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ExternalUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalUncertaintySourceItemProvider externalUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ExternalUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalUncertaintySourceAdapter() {
		if (externalUncertaintySourceItemProvider == null) {
			externalUncertaintySourceItemProvider = new ExternalUncertaintySourceItemProvider(this);
		}

		return externalUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ExternalUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalUncertaintyScenarioItemProvider externalUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ExternalUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalUncertaintyScenarioAdapter() {
		if (externalUncertaintyScenarioItemProvider == null) {
			externalUncertaintyScenarioItemProvider = new ExternalUncertaintyScenarioItemProvider(this);
		}

		return externalUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.BehaviorUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorUncertaintySourceItemProvider behaviorUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.BehaviorUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorUncertaintySourceAdapter() {
		if (behaviorUncertaintySourceItemProvider == null) {
			behaviorUncertaintySourceItemProvider = new BehaviorUncertaintySourceItemProvider(this);
		}

		return behaviorUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.BehaviorUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorUncertaintyScenarioItemProvider behaviorUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.BehaviorUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorUncertaintyScenarioAdapter() {
		if (behaviorUncertaintyScenarioItemProvider == null) {
			behaviorUncertaintyScenarioItemProvider = new BehaviorUncertaintyScenarioItemProvider(this);
		}

		return behaviorUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.InterfaceUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceUncertaintySourceItemProvider interfaceUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.InterfaceUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceUncertaintySourceAdapter() {
		if (interfaceUncertaintySourceItemProvider == null) {
			interfaceUncertaintySourceItemProvider = new InterfaceUncertaintySourceItemProvider(this);
		}

		return interfaceUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.InterfaceUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceUncertaintyScenarioItemProvider interfaceUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.InterfaceUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceUncertaintyScenarioAdapter() {
		if (interfaceUncertaintyScenarioItemProvider == null) {
			interfaceUncertaintyScenarioItemProvider = new InterfaceUncertaintyScenarioItemProvider(this);
		}

		return interfaceUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ConnectorUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorUncertaintySourceItemProvider connectorUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ConnectorUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorUncertaintySourceAdapter() {
		if (connectorUncertaintySourceItemProvider == null) {
			connectorUncertaintySourceItemProvider = new ConnectorUncertaintySourceItemProvider(this);
		}

		return connectorUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ConnectorUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorUncertaintyScenarioItemProvider connectorUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ConnectorUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorUncertaintyScenarioAdapter() {
		if (connectorUncertaintyScenarioItemProvider == null) {
			connectorUncertaintyScenarioItemProvider = new ConnectorUncertaintyScenarioItemProvider(this);
		}

		return connectorUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ComponentUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentUncertaintySourceItemProvider componentUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ComponentUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentUncertaintySourceAdapter() {
		if (componentUncertaintySourceItemProvider == null) {
			componentUncertaintySourceItemProvider = new ComponentUncertaintySourceItemProvider(this);
		}

		return componentUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ComponentUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentUncertaintyScenarioItemProvider componentUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.ComponentUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentUncertaintyScenarioAdapter() {
		if (componentUncertaintyScenarioItemProvider == null) {
			componentUncertaintyScenarioItemProvider = new ComponentUncertaintyScenarioItemProvider(this);
		}

		return componentUncertaintyScenarioItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (externalUncertaintySourceItemProvider != null) externalUncertaintySourceItemProvider.dispose();
		if (externalUncertaintyScenarioItemProvider != null) externalUncertaintyScenarioItemProvider.dispose();
		if (behaviorUncertaintySourceItemProvider != null) behaviorUncertaintySourceItemProvider.dispose();
		if (behaviorUncertaintyScenarioItemProvider != null) behaviorUncertaintyScenarioItemProvider.dispose();
		if (interfaceUncertaintySourceItemProvider != null) interfaceUncertaintySourceItemProvider.dispose();
		if (interfaceUncertaintyScenarioItemProvider != null) interfaceUncertaintyScenarioItemProvider.dispose();
		if (connectorUncertaintySourceItemProvider != null) connectorUncertaintySourceItemProvider.dispose();
		if (connectorUncertaintyScenarioItemProvider != null) connectorUncertaintyScenarioItemProvider.dispose();
		if (componentUncertaintySourceItemProvider != null) componentUncertaintySourceItemProvider.dispose();
		if (componentUncertaintyScenarioItemProvider != null) componentUncertaintyScenarioItemProvider.dispose();
	}

}
