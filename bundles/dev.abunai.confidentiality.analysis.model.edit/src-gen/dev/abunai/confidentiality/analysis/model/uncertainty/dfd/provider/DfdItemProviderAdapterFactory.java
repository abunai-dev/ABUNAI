/**
 */
package dev.abunai.confidentiality.analysis.model.uncertainty.dfd.provider;

import dev.abunai.confidentiality.analysis.model.uncertainty.dfd.util.DfdAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DfdItemProviderAdapterFactory extends DfdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DfdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDExternalUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDExternalUncertaintySourceItemProvider dfdExternalUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDExternalUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDExternalUncertaintySourceAdapter() {
		if (dfdExternalUncertaintySourceItemProvider == null) {
			dfdExternalUncertaintySourceItemProvider = new DFDExternalUncertaintySourceItemProvider(this);
		}

		return dfdExternalUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDExternalUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDExternalUncertaintyScenarioItemProvider dfdExternalUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDExternalUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDExternalUncertaintyScenarioAdapter() {
		if (dfdExternalUncertaintyScenarioItemProvider == null) {
			dfdExternalUncertaintyScenarioItemProvider = new DFDExternalUncertaintyScenarioItemProvider(this);
		}

		return dfdExternalUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDBehaviorUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDBehaviorUncertaintySourceItemProvider dfdBehaviorUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDBehaviorUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDBehaviorUncertaintySourceAdapter() {
		if (dfdBehaviorUncertaintySourceItemProvider == null) {
			dfdBehaviorUncertaintySourceItemProvider = new DFDBehaviorUncertaintySourceItemProvider(this);
		}

		return dfdBehaviorUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDBehaviorUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDBehaviorUncertaintyScenarioItemProvider dfdBehaviorUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDBehaviorUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDBehaviorUncertaintyScenarioAdapter() {
		if (dfdBehaviorUncertaintyScenarioItemProvider == null) {
			dfdBehaviorUncertaintyScenarioItemProvider = new DFDBehaviorUncertaintyScenarioItemProvider(this);
		}

		return dfdBehaviorUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDInterfaceUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDInterfaceUncertaintySourceItemProvider dfdInterfaceUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDInterfaceUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDInterfaceUncertaintySourceAdapter() {
		if (dfdInterfaceUncertaintySourceItemProvider == null) {
			dfdInterfaceUncertaintySourceItemProvider = new DFDInterfaceUncertaintySourceItemProvider(this);
		}

		return dfdInterfaceUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDInterfaceUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDInterfaceUncertaintyScenarioItemProvider dfdInterfaceUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDInterfaceUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDInterfaceUncertaintyScenarioAdapter() {
		if (dfdInterfaceUncertaintyScenarioItemProvider == null) {
			dfdInterfaceUncertaintyScenarioItemProvider = new DFDInterfaceUncertaintyScenarioItemProvider(this);
		}

		return dfdInterfaceUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDConnectorUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDConnectorUncertaintySourceItemProvider dfdConnectorUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDConnectorUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDConnectorUncertaintySourceAdapter() {
		if (dfdConnectorUncertaintySourceItemProvider == null) {
			dfdConnectorUncertaintySourceItemProvider = new DFDConnectorUncertaintySourceItemProvider(this);
		}

		return dfdConnectorUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDConnectorUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDConnectorUncertaintyScenarioItemProvider dfdConnectorUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDConnectorUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDConnectorUncertaintyScenarioAdapter() {
		if (dfdConnectorUncertaintyScenarioItemProvider == null) {
			dfdConnectorUncertaintyScenarioItemProvider = new DFDConnectorUncertaintyScenarioItemProvider(this);
		}

		return dfdConnectorUncertaintyScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDComponentUncertaintySource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDComponentUncertaintySourceItemProvider dfdComponentUncertaintySourceItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDComponentUncertaintySource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDComponentUncertaintySourceAdapter() {
		if (dfdComponentUncertaintySourceItemProvider == null) {
			dfdComponentUncertaintySourceItemProvider = new DFDComponentUncertaintySourceItemProvider(this);
		}

		return dfdComponentUncertaintySourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDComponentUncertaintyScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DFDComponentUncertaintyScenarioItemProvider dfdComponentUncertaintyScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link dev.abunai.confidentiality.analysis.model.uncertainty.dfd.DFDComponentUncertaintyScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDFDComponentUncertaintyScenarioAdapter() {
		if (dfdComponentUncertaintyScenarioItemProvider == null) {
			dfdComponentUncertaintyScenarioItemProvider = new DFDComponentUncertaintyScenarioItemProvider(this);
		}

		return dfdComponentUncertaintyScenarioItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dfdExternalUncertaintySourceItemProvider != null) dfdExternalUncertaintySourceItemProvider.dispose();
		if (dfdExternalUncertaintyScenarioItemProvider != null) dfdExternalUncertaintyScenarioItemProvider.dispose();
		if (dfdBehaviorUncertaintySourceItemProvider != null) dfdBehaviorUncertaintySourceItemProvider.dispose();
		if (dfdBehaviorUncertaintyScenarioItemProvider != null) dfdBehaviorUncertaintyScenarioItemProvider.dispose();
		if (dfdInterfaceUncertaintySourceItemProvider != null) dfdInterfaceUncertaintySourceItemProvider.dispose();
		if (dfdInterfaceUncertaintyScenarioItemProvider != null) dfdInterfaceUncertaintyScenarioItemProvider.dispose();
		if (dfdConnectorUncertaintySourceItemProvider != null) dfdConnectorUncertaintySourceItemProvider.dispose();
		if (dfdConnectorUncertaintyScenarioItemProvider != null) dfdConnectorUncertaintyScenarioItemProvider.dispose();
		if (dfdComponentUncertaintySourceItemProvider != null) dfdComponentUncertaintySourceItemProvider.dispose();
		if (dfdComponentUncertaintyScenarioItemProvider != null) dfdComponentUncertaintyScenarioItemProvider.dispose();
	}

}
